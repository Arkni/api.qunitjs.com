<entry type="method" name="notDeepEqual">
  <signature>
    <argument name="actual" type="String,Number,Boolean,Array,PlainObject,Date,RegExp,Function,Nan,Null,Undefined">
      <desc>Expression being tested</desc>
    </argument>
    <argument name="expected" type="String,Number,Boolean,Array,PlainObject,Date,RegExp,Function,Nan,Null,Undefined">
      <desc>Known comparison value</desc>
    </argument>
    <argument name="message" type="String">
      <desc>A short description of the assertion</desc>
    </argument>
  </signature>
  <desc>
    A deep recursive comparison assertion, working on primitive types, arrays, objects, regular expressions, dates and functions, with the result inverted, passing when some property isn't equal.
  </desc>
  <longdesc>
    <p>The <code>notDeepEqual()</code> assertion can be used just like <code>notEqual()</code> and is a better choice in most cases. Instead of the simple comparison operator (<code>!=</code>), it uses the more accurate comparison operator (<code>!==</code>).</p>

  </longdesc>
  <example height="250">
    <desc>Compare the value of two objects.</desc>
<code><![CDATA[
test( "notDeepEqual test", function() {
  var obj = { foo: 1 };

  notDeepEqual( obj, { foo: "1" }, "Two objects are not of the same value" );
});
]]></code>
  </example>

  <category slug="assert"/>
</entry>

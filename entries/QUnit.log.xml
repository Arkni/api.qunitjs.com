<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry type="method" name="QUnit.log">
	<title>QUnit.log()</title>
	<signature>
		<argument name="callback">
			<desc>Callback to execute. Provides a single argument with the following properties:</desc>
			<type name="Function">
				<argument name="details" type="Object"/>
			</type>
			<property name="result" type="Boolean">
				<desc>The boolean result of an assertion, <code>true</code> means passed, <code>false</code> means failed.</desc>
			</property>
			<property name="actual" type="Object">
				<desc>One side of a comparision assertion. Can be undefined when <code>ok()</code> is used.</desc>
			</property>
			<property name="expected" type="Object">
				<desc>One side of a comparision assertion. Can be undefined when <code>ok()</code> is used.</desc>
			</property>
			<property name="message" type="String">
				<desc>A string description provided by the assertion.</desc>
			</property>
			<property name="source" type="String">
				<desc>The associated stacktrace, either from an exception or pointing to the source of the assertion. Depends on browser support for providing stacktraces, so can be undefined.</desc>
			</property>
		</argument>
	</signature>
	<desc>Register a callback to fire whenever an assertion completes.</desc>
	<longdesc>
		This is one of several callbacks QUnit provides. Its intended for integration scenarios like PhantomJS or Jenkins.
		<p>The properties of the details argument are listed below as options.</p>
	</longdesc>
	<example>
		<desc>Register a callback that logs assertion result and its message</desc>
		<code><![CDATA[
QUnit.log(function( details ) {
	console.log( "Log: ", details.result, details.message );
});
]]></code>
	</example>
	<category slug="callbacks"/>
</entry>

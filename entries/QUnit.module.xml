<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry type="method" name="QUnit.module">
	<title>QUnit.module()</title>
	<signature>
		<argument name="name" type="String">
			<desc>Label for this group of tests</desc>
		</argument>
		<argument name="lifecycle" type="PlainObject">
			<desc>Callbacks to run before and after each test</desc>
			<property name="setup" type="Function">
				<desc>Runs before each test</desc>
			</property>
			<property name="teardown" type="Function">
				<desc>Runs after each test</desc>
			</property>
		</argument>
	</signature>
	<desc>
		Group related tests under a single label.
	</desc>
	<longdesc>
		<p>
			All tests that occur after a call to <code>QUnit.module()</code> will be grouped into that module, until other <code>QUnit.module()</code> is called. The test names will all be preceded by the module name in the test results. You can then use that module name to select tests to run.
		</p>
		<p>
			You can specify code to run before and after each test using the lifecycle argument.
		</p>
	</longdesc>
	<example>
		<desc>Use the <code>QUnit.module()</code> function to group tests together:</desc>
<code><![CDATA[
QUnit.module( "group a" );
QUnit.test( "a basic test example", function( assert ) {
	assert.ok( true, "this test is fine" );
});
QUnit.test( "a basic test example 2", function( assert ) {
	assert.ok( true, "this test is fine" );
});

QUnit.module( "group b" );
QUnit.test( "a basic test example 3", function( assert ) {
	assert.ok( true, "this test is fine" );
});
QUnit.test( "a basic test example 4", function() {
	assert.ok( true, "this test is fine" );
});
]]></code>
	</example>
	<example>
		<desc>A sample for using the setup and teardown callbacks</desc>
<code><![CDATA[
QUnit.module( "module A", {
	setup: function() {
		// prepare something for all following tests
	},
	teardown: function() {
		// clean up after each test
	}
});
]]></code>
	</example>
	<category slug="test"/>
</entry>
